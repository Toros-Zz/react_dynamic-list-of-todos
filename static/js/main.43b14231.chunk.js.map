{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectUsersbyId","selectedUserId","setCheckTodo","inputFilterValue","hendlerFilterInput","selectFilterValue","hendlerFilterSelect","randomSortTodos","className","type","name","placeholder","value","onChange","defaultValue","onClick","map","todo","classNames","completed","htmlFor","id","checked","title","userId","API_BASE_URL","getAllTodos","fetch","then","response","json","getUserById","getSelectTodos","complete","a","updateCheckTodo","isChecked","method","headers","body","JSON","stringify","CurrentUser","state","user","loadUser","serverUser","setState","catch","this","props","prevProps","email","phone","onClearUser","React","Component","App","visibleTodos","loadAllTodos","loadCheckTodo","updateTodos","clearSelectedUser","event","target","filterTodos","filter","includes","random","Number","Math","toFixed","sort","b","localeCompare","_","prevState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.43b14231.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todos: Todo[];\n  selectedUserId: number;\n  selectUsersbyId: (id: number) => void;\n  setCheckTodo: (id: number, isChecked: boolean) => void;\n  inputFilterValue: string;\n  hendlerFilterInput: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  selectFilterValue: string;\n  hendlerFilterSelect: (event: React.ChangeEvent<HTMLSelectElement>) => void;\n  randomSortTodos: () => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectUsersbyId,\n  selectedUserId,\n  setCheckTodo,\n  inputFilterValue,\n  hendlerFilterInput,\n  selectFilterValue,\n  hendlerFilterSelect,\n  randomSortTodos,\n}) => (\n  <div className=\"TodoList\">\n\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <input\n        type=\"text\"\n        name=\"titleFilter\"\n        className=\"input\"\n        placeholder=\"Search todo\"\n        value={inputFilterValue}\n        onChange={hendlerFilterInput}\n      />\n      <select\n        name=\"selectTodos\"\n        defaultValue={selectFilterValue}\n        className=\"select\"\n        onChange={hendlerFilterSelect}\n      >\n        <option value=\"all\">All</option>\n        <option value=\"active\">Active</option>\n        <option value=\"complated\">Complated</option>\n      </select>\n\n      <button\n        type=\"button\"\n        className=\"button is-primary is-light\"\n        onClick={randomSortTodos}\n      >\n        Randomize\n      </button>\n\n      <ul className=\"TodoList__list\">\n        {\n          todos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames(\n                'TodoList__item',\n                { 'TodoList__item--unchecked': !todo.completed },\n                { 'TodoList__item--checked': todo.completed },\n              )}\n            >\n              <label htmlFor={`${todo.id}`}>\n                <input\n                  type=\"checkbox\"\n                  id={`${todo.id}`}\n                  checked={todo.completed}\n                  onChange={() => (setCheckTodo(todo.id, todo.completed))}\n                />\n                <p>\n                  {todo.title}\n                </p>\n              </label>\n\n              <button\n                className={classNames(\n                  'TodoList__user-button',\n                  'button',\n                  { 'TodoList__user-button--selected': (todo.userId === selectedUserId) },\n                )}\n                type=\"button\"\n                onClick={() => (selectUsersbyId(todo.userId))}\n              >\n                User&nbsp;\n                {todo.userId}\n              </button>\n            </li>\n          ))\n        }\n      </ul>\n    </div>\n  </div>\n);\n","const API_BASE_URL = 'https://mate.academy/students-api';\n\nexport function getAllTodos(): Promise<Todo[]> {\n  return fetch(`${API_BASE_URL}/todos`)\n    .then(response => response.json());\n}\n\nexport function getUserById(id: number): Promise<User> {\n  return fetch(`${API_BASE_URL}/users/${id}`)\n    .then(response => response.json());\n}\n\nexport const getSelectTodos = async (complete: boolean): Promise<Todo[]> => {\n  return fetch(`${API_BASE_URL}/todos?completed=${complete}`)\n    .then(response => response.json());\n};\n\nexport function updateCheckTodo(id: number, isChecked: boolean) {\n  return fetch(`${API_BASE_URL}/todos/${id}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({ completed: !isChecked }),\n  });\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUserById } from '../../api/api';\n\ntype Props = {\n  userId: number;\n  onClearUser: () => void;\n};\n\ntype State = {\n  user: User | null;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.loadUser(this.props.userId);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps !== this.props) {\n      this.loadUser(this.props.userId);\n    }\n  }\n\n  loadUser = async (id: number) => {\n    await getUserById(id).then(serverUser => {\n      this.setState({\n        user: { ...serverUser },\n      });\n    }).catch(() => {\n      this.setState({\n        user: null,\n      });\n    });\n  };\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        {\n          user\n            ? (\n              <>\n                <h2 className=\"CurrentUser__title\">\n                  <span>\n                    Selected user:\n                    {user?.id}\n                  </span>\n                </h2>\n\n                <h3 className=\"CurrentUser__name\">\n                  {user?.name}\n                </h3>\n                <p className=\"CurrentUser__email\">\n                  {user?.email}\n                </p>\n                <p className=\"CurrentUser__phone\">\n                  {user?.phone}\n                </p>\n              </>\n            )\n            : (\n              <span>\n                Can not find a User\n              </span>\n            )\n        }\n        <br />\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={this.props.onClearUser}\n        >\n          Clear\n        </button>\n\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodos, updateCheckTodo, getSelectTodos } from './api/api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n  visibleTodos: Todo[];\n  inputFilterValue: string;\n  selectFilterValue: string;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    visibleTodos: [],\n    inputFilterValue: '',\n    selectFilterValue: 'all',\n  };\n\n  componentDidMount() {\n    this.loadAllTodos();\n  }\n\n  componentDidUpdate(_: any, prevState: State) {\n    if (this.state.inputFilterValue !== prevState.inputFilterValue\n      || this.state.todos !== prevState.todos) {\n      this.filterTodos();\n    }\n  }\n\n  loadAllTodos = () => {\n    getAllTodos()\n      .then(todos => {\n        this.setState({\n          todos: [...todos],\n          visibleTodos: [...todos],\n        });\n      });\n  };\n\n  loadCheckTodo = async (isChecked: boolean) => {\n    getSelectTodos(isChecked)\n      .then(todos => {\n        this.setState({\n          todos: [...todos],\n          visibleTodos: [...todos],\n        });\n      });\n  };\n\n  selectUsersbyId = (id: number) => {\n    if (id !== this.state.selectedUserId) {\n      this.setState({\n        selectedUserId: id,\n      });\n    }\n  };\n\n  setCheckTodo = async (id: number, isChecked: boolean) => {\n    await updateCheckTodo(id, isChecked);\n    this.updateTodos(this.state.selectFilterValue);\n  };\n\n  clearSelectedUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  hendlerFilterInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    this.setState({\n      inputFilterValue: value,\n    });\n  };\n\n  hendlerFilterSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    this.updateTodos(value);\n\n    this.setState({\n      selectFilterValue: value,\n    });\n  };\n\n  updateTodos = (value: string) => {\n    switch (value) {\n      case 'active':\n        this.loadCheckTodo(true);\n        break;\n      case 'complated':\n        this.loadCheckTodo(false);\n        break;\n      default:\n        this.loadAllTodos();\n    }\n  };\n\n  filterTodos = () => {\n    this.setState(state => ({\n      visibleTodos: state.todos.filter(todo => (todo.title.includes(state.inputFilterValue))),\n    }));\n  };\n\n  randomSortTodos = () => {\n    const random = Number((Math.random() * 20).toFixed(0));\n\n    this.setState(state => ({\n      visibleTodos: [...state.visibleTodos].sort((a, b) => {\n        if (a.title[random] && b.title[random]) {\n          return a.title[random].localeCompare(b.title[random]);\n        }\n\n        return -1;\n      }),\n    }));\n  };\n\n  render() {\n    const {\n      selectedUserId,\n      visibleTodos,\n      inputFilterValue,\n      selectFilterValue,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={visibleTodos}\n            selectUsersbyId={this.selectUsersbyId}\n            selectedUserId={selectedUserId}\n            setCheckTodo={this.setCheckTodo}\n            inputFilterValue={inputFilterValue}\n            hendlerFilterInput={this.hendlerFilterInput}\n            selectFilterValue={selectFilterValue}\n            hendlerFilterSelect={this.hendlerFilterSelect}\n            randomSortTodos={this.randomSortTodos}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onClearUser={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}