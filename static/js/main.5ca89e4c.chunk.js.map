{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectUsersbyId","selectedUserId","setCheckTodo","className","map","todo","classNames","completed","htmlFor","id","type","checked","onChange","title","userId","onClick","API_BASE_URL","getAllTodos","fetch","then","response","json","getUserById","UpdateCheckTodo","isChecked","method","headers","body","JSON","stringify","CurrentUser","state","user","loadUser","a","serverUser","setState","catch","this","props","prevProps","name","email","phone","onClearUser","React","Component","App","visibleTodos","inputFilterValue","selectFilterValue","loadAllTodos","filterTodos","clearSelectedUser","hendlerFilterInput","event","value","target","hendlerFilterSelect","filter","includes","randomSortTodos","random","Number","Math","toFixed","sort","b","localeCompare","_","prevState","placeholder","defaultValue","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ca89e4c.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todos: Todo[];\n  selectedUserId: number;\n  selectUsersbyId: (id: number) => void;\n  setCheckTodo: (id: number, isChecked: boolean) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectUsersbyId,\n  selectedUserId,\n  setCheckTodo,\n}) => (\n  <div className=\"TodoList\">\n\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {\n          todos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames(\n                'TodoList__item',\n                { 'TodoList__item--unchecked': !todo.completed },\n                { 'TodoList__item--checked': todo.completed },\n              )}\n            >\n              <label htmlFor={`${todo.id}`}>\n                <input\n                  type=\"checkbox\"\n                  id={`${todo.id}`}\n                  checked={todo.completed}\n                  onChange={() => (setCheckTodo(todo.id, todo.completed))}\n                />\n                <p>\n                  {todo.title}\n                </p>\n              </label>\n\n              <button\n                className={classNames(\n                  'TodoList__user-button',\n                  'button',\n                  { 'TodoList__user-button--selected': (todo.userId === selectedUserId) },\n                )}\n                type=\"button\"\n                onClick={() => (selectUsersbyId(todo.userId))}\n              >\n                User&nbsp;\n                {todo.userId}\n              </button>\n            </li>\n          ))\n        }\n      </ul>\n    </div>\n  </div>\n);\n","const API_BASE_URL = 'https://mate.academy/students-api';\n\nexport function getAllTodos(): Promise<Todo[]> {\n  return fetch(`${API_BASE_URL}/todos`)\n    .then(response => response.json());\n}\n\nexport function getUserById(id: number): Promise<User> {\n  return fetch(`${API_BASE_URL}/users/${id}`)\n    .then(response => response.json());\n}\n\nexport function UpdateCheckTodo(id: number, isChecked: boolean) {\n  return fetch(`${API_BASE_URL}/todos/${id}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({ completed: !isChecked }),\n  });\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUserById } from '../../api/api';\n\ntype Props = {\n  userId: number;\n  onClearUser: () => void;\n};\n\ntype State = {\n  user: User | null;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.loadUser(this.props.userId);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps !== this.props) {\n      this.loadUser(this.props.userId);\n    }\n  }\n\n  loadUser = async (id: number) => {\n    await getUserById(id).then(serverUser => {\n      this.setState({\n        user: { ...serverUser },\n      });\n    }).catch(() => {\n      this.setState({\n        user: null,\n      });\n    });\n  };\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        {\n          user\n            ? (\n              <>\n                <h2 className=\"CurrentUser__title\">\n                  <span>\n                    Selected user:\n                    {user?.id}\n                  </span>\n                </h2>\n\n                <h3 className=\"CurrentUser__name\">\n                  {user?.name}\n                </h3>\n                <p className=\"CurrentUser__email\">\n                  {user?.email}\n                </p>\n                <p className=\"CurrentUser__phone\">\n                  {user?.phone}\n                </p>\n              </>\n            )\n            : (\n              <span>\n                Can not find a User\n              </span>\n            )\n        }\n        <br />\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={this.props.onClearUser}\n        >\n          Clear\n        </button>\n\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodos, UpdateCheckTodo } from './api/api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n  visibleTodos: Todo[];\n  inputFilterValue: string;\n  selectFilterValue: string;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    visibleTodos: [],\n    inputFilterValue: '',\n    selectFilterValue: 'all',\n  };\n\n  componentDidMount() {\n    this.loadAllTodos();\n  }\n\n  componentDidUpdate(_: any, prevState: State) {\n    if (this.state.inputFilterValue !== prevState.inputFilterValue\n      || this.state.selectFilterValue !== prevState.selectFilterValue) {\n      this.filterTodos();\n    }\n  }\n\n  loadAllTodos = () => {\n    getAllTodos()\n      .then(todos => {\n        this.setState({\n          todos: [...todos],\n          visibleTodos: [...todos],\n        });\n      });\n  };\n\n  selectUsersbyId = (id: number) => {\n    if (id !== this.state.selectedUserId) {\n      this.setState({\n        selectedUserId: id,\n      });\n    }\n  };\n\n  setCheckTodo = async (id: number, isChecked: boolean) => {\n    await UpdateCheckTodo(id, isChecked);\n    await getAllTodos()\n      .then(todos => {\n        this.setState({\n          todos: [...todos],\n        });\n      });\n    this.filterTodos();\n  };\n\n  clearSelectedUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  hendlerFilterInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    this.setState({\n      inputFilterValue: value,\n    });\n  };\n\n  hendlerFilterSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    this.setState({\n      selectFilterValue: value,\n    });\n  };\n\n  filterTodos = () => {\n    const { inputFilterValue, selectFilterValue, todos } = this.state;\n    const visibleTodos = todos.filter(todo => {\n      switch (selectFilterValue) {\n        case 'active':\n          return todo.title.includes(inputFilterValue) && !todo.completed;\n        case 'complated':\n          return todo.title.includes(inputFilterValue) && todo.completed;\n        default:\n          return todo.title.includes(inputFilterValue);\n      }\n    });\n\n    this.setState({\n      visibleTodos,\n    });\n  };\n\n  randomSortTodos = () => {\n    const random = Number((Math.random() * 20).toFixed(0));\n\n    this.setState(state => ({\n      visibleTodos: [...state.visibleTodos].sort((a, b) => {\n        if (a.title[random] && b.title[random]) {\n          return a.title[random].localeCompare(b.title[random]);\n        }\n\n        return -1;\n      }),\n    }));\n  };\n\n  render() {\n    const {\n      selectedUserId,\n      visibleTodos,\n      inputFilterValue,\n      selectFilterValue,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <input\n            type=\"text\"\n            name=\"titleFilter\"\n            className=\"input\"\n            placeholder=\"Search todo\"\n            value={inputFilterValue}\n            onChange={this.hendlerFilterInput}\n          />\n          <select\n            name=\"selectTodos\"\n            defaultValue={selectFilterValue}\n            className=\"select\"\n            onChange={this.hendlerFilterSelect}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"complated\">Complated</option>\n          </select>\n\n          <button\n            type=\"button\"\n            className=\"button is-primary is-light\"\n            onClick={this.randomSortTodos}\n          >\n            Randomize\n          </button>\n\n          <TodoList\n            todos={visibleTodos}\n            selectUsersbyId={this.selectUsersbyId}\n            selectedUserId={selectedUserId}\n            setCheckTodo={this.setCheckTodo}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onClearUser={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}